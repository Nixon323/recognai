# -*- coding: utf-8 -*-
"""GroupDatathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wqo6Ygr5EyJNgBkNrJyG8rLEX3srDamN
"""

import pandas as pd
pip install datasets
from datasets import load_dataset
import pandas as pd
dataset = load_dataset("amazon_us_reviews", 'Mobile_Electronics_v1_00')
dataset = dataset.data['train']
table_df = dataset.table
review_df = table_df.to_pandas()





pd.set_option('display.max_columns', 500)
pd.set_option('display.min_rows', 100)

review_df = table_df.to_pandas()

for col in review_df.columns:
  print(f'{col} has {review_df[col].nunique()} unique vals')

print(review_df.head(10))

# we will take only necessary columns
review_df = review_df[['product_title', 'product_parent', 'product_id', 'review_headline', 'review_body','total_votes', 'helpful_votes', 'review_date']]

print(review_df['total_votes'].describe(percentiles=[.1,.2,.3,.4,.5,.6,.7,.8,.9]))

review_df_voted = review_df[review_df['total_votes'] > 5]
review_df_voted.loc[:,'help_ratio'] = review_df_voted['helpful_votes'] / review_df_voted['total_votes']
print(review_df_voted['help_ratio'].describe(percentiles=[.1,.2,.3,.4,.5,.6,.7,.8,.9]))
review_df_voted['rank'] = pd.qcut(review_df_voted['help_ratio'], 3, labels=[1,2,3])
print(review_df_voted['rank'].value_counts(sort=False))

print(review_df_voted['ratio_class'].value_counts(normalize=True))

print(review_df_voted[['total_votes', 'helpful_votes', 'help_ratio']])

## another approach of classes:

review_df = table_df.to_pandas()
review_df = review_df[review_df['total_votes']>1]
review_df = review_df[['product_title', 'product_parent', 'product_id', 'review_headline', 'review_body','total_votes', 'helpful_votes']]
print(review_df['helpful_votes'].describe(percentiles=[.1,.2,.3,.4,.5,.6,.7,.8,.9]))
def helpful_votes_to_class(help_count):
  if help_count < 1:
    return 'not_useful'
  if help_count ==1:
    return 'helpful review'
  else:
    return 'very helpful review'


review_df['vote_class'] = review_df['helpful_votes'].apply(lambda help_count: helpful_votes_to_class(help_count))
print(review_df['vote_class'].value_counts(normalize=True))

review_df_voted_1 = review_df[review_df['total_votes'] >1]
review_df_voted_1['review_date'] = pd.to_datetime(review_df_voted_1['review_date'])
print(review_df_voted_1['review_date'].max())

